{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "qrcode",
  "type": "registry:component",
  "title": "QR Code Generator",
  "author": "Tobias Bueschel <https://github.com/tobiasbueschel>",
  "description": "AI SDK tool that generates QR codes for text or URLs. Includes a QR code display component.",
  "dependencies": [
    "zod",
    "ai",
    "qrcode",
    "@types/qrcode",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "lucide-react",
    "react-syntax-highlighter"
  ],
  "registryDependencies": [
    "https://ai-tools-registry.vercel.app/r/card.json",
    "https://ai-tools-registry.vercel.app/r/button.json"
  ],
  "files": [
    {
      "path": "registry/ai-tools/tools/qrcode/tool.ts",
      "content": "import { UIToolInvocation, tool } from \"ai\"\nimport { z } from \"zod\"\nimport QRCode from \"qrcode\"\n\nexport const QRCodeSchema = z.object({\n  data: z.string(),\n  size: z.number(),\n  output: z.string(),\n})\n\nexport type QRCodeResult = z.infer<typeof QRCodeSchema>\n\nexport const qrCodeTool = tool({\n  name: \"qrcode\",\n  description: \"Generate QR codes for text, URLs, or other data.\",\n  inputSchema: z.object({\n    data: z\n      .string()\n      .min(1)\n      .describe(\"The text or URL to encode in the QR code\"),\n    size: z\n      .number()\n      .min(100)\n      .max(500)\n      .default(300)\n      .describe(\"Size of the QR code in pixels\"),\n  }),\n  outputSchema: QRCodeSchema,\n  execute: async ({ data, size }) => {\n    const output = await QRCode.toDataURL(data, {\n      width: size,\n      margin: 4,\n    })\n\n    const result: QRCodeResult = {\n      data,\n      size,\n      output,\n    }\n\n    return result\n  },\n})\n\nexport type QRCodeToolType = UIToolInvocation<typeof qrCodeTool>\n",
      "type": "registry:file",
      "target": "~/ai/tools/qrcode/tool.ts"
    },
    {
      "path": "registry/ai-tools/tools/qrcode/component.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport type { QRCodeToolType } from \"./tool\"\nimport { Button } from \"@/registry/ai-tools/ui/button\"\nimport { CheckIcon, DownloadIcon } from \"lucide-react\"\nimport { Loader } from \"@/registry/ai-elements/loader\"\nimport { CodeBlock } from \"@/registry/ai-elements/code-block\"\nimport { cn } from \"@/lib/utils\"\nimport { Card, CardContent, CardHeader } from \"@/registry/ai-tools/ui/card\"\nimport { Skeleton } from \"@/registry/ai-tools/ui/skeleton\"\n\nexport function QRCodeDisplay({ invocation }: { invocation: QRCodeToolType }) {\n  const part = invocation\n  const cardBaseClass =\n    \"not-prose flex w-full flex-col gap-0 overflow-hidden border border-border/50 bg-background/95 py-0 text-foreground shadow-sm\"\n  const headerBaseClass =\n    \"flex flex-col gap-2 border-b border-border/50 px-5 py-4 sm:flex-row sm:items-center sm:justify-between\"\n  const contentBaseClass = \"px-6 py-5\"\n  const renderHeader = (\n    title: React.ReactNode,\n    description?: React.ReactNode,\n    actions?: React.ReactNode\n  ) => {\n    const descriptionNode =\n      typeof description === \"string\" ? (\n        <p className=\"text-xs text-muted-foreground\">{description}</p>\n      ) : (\n        (description ?? null)\n      )\n\n    return (\n      <CardHeader className={headerBaseClass}>\n        {(title || descriptionNode) && (\n          <div className=\"space-y-1\">\n            {title ? (\n              <h3 className=\"text-sm font-semibold leading-none tracking-tight text-foreground\">\n                {title}\n              </h3>\n            ) : null}\n            {descriptionNode}\n          </div>\n        )}\n        {actions ? (\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            {actions}\n          </div>\n        ) : null}\n      </CardHeader>\n    )\n  }\n  if (part.state === \"input-streaming\") {\n    return (\n      <Card className={cn(cardBaseClass, \"max-w-xl animate-in fade-in-50\")}>\n        {renderHeader(\"QR Code\", \"Waiting for data…\")}\n        <CardContent\n          className={cn(\n            contentBaseClass,\n            \"space-y-4 text-sm text-muted-foreground\"\n          )}\n        >\n          <div className=\"flex items-center gap-2\">\n            <Loader /> Preparing request\n          </div>\n          <div className=\"space-y-3\">\n            <Skeleton className=\"mx-auto h-[220px] w-[210px] rounded-2xl\" />\n            <Skeleton className=\"h-10 w-full rounded-lg\" />\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (part.state === \"input-available\") {\n    return (\n      <Card className={cn(cardBaseClass, \"max-w-xl animate-in fade-in-50\")}>\n        {renderHeader(\"QR Code\", \"Generating…\")}\n        <CardContent className={cn(contentBaseClass, \"space-y-4\")}>\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <Loader /> Running tool\n          </div>\n          <div className=\"space-y-3\">\n            <Skeleton className=\"mx-auto h-[220px] w-[210px] rounded-2xl\" />\n            <Skeleton className=\"h-10 w-full rounded-lg\" />\n          </div>\n          {part.input ? (\n            <div className=\"rounded-md border border-border/40 bg-muted/40\">\n              <CodeBlock\n                code={JSON.stringify(part.input, null, 2)}\n                language=\"json\"\n              />\n            </div>\n          ) : null}\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (part.state === \"output-error\") {\n    return (\n      <Card className={cn(cardBaseClass, \"max-w-xl animate-in fade-in-50\")}>\n        {renderHeader(\"QR Code\", \"Error\")}\n        <CardContent className={contentBaseClass}>\n          <div className=\"rounded-md border border-destructive/30 bg-destructive/10 p-3 text-sm text-destructive\">\n            {part.errorText ||\n              \"An error occurred while generating the QR code.\"}\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n  if (part.output === undefined) return null\n  const data = part.output\n  const [downloading, setDownloading] = React.useState(false)\n  const [downloaded, setDownloaded] = React.useState(false)\n  const [error, setError] = React.useState<string | null>(null)\n\n  const handleDownload = async () => {\n    setDownloading(true)\n    setError(null)\n    try {\n      // Convert data URL to blob\n      const response = await fetch(data.output)\n      const blob = await response.blob()\n      const url = URL.createObjectURL(blob)\n      const a = document.createElement(\"a\")\n      a.href = url\n      a.download = \"qrcode.png\"\n      document.body.appendChild(a)\n      a.click()\n      document.body.removeChild(a)\n      URL.revokeObjectURL(url)\n      setDownloaded(true)\n      // Brief success state similar to copy buttons\n      setTimeout(() => setDownloaded(false), 1200)\n    } catch (error) {\n      console.error(\"Failed to download QR code:\", error)\n      setError(\"Failed to download. Please try again.\")\n    } finally {\n      setDownloading(false)\n    }\n  }\n\n  return (\n    <Card className={cn(cardBaseClass, \"max-w-sm animate-in fade-in-50\")}>\n      {renderHeader(\n        \"QR Code\",\n        data.data.length > 50 ? `${data.data.slice(0, 50)}…` : data.data\n      )}\n      <CardContent\n        className={cn(\n          contentBaseClass,\n          \"flex flex-col items-center gap-4 pb-6\"\n        )}\n      >\n        <div\n          className=\"relative w-full max-w-[280px] overflow-hidden rounded-2xl border border-border/40 bg-background/80 p-4 shadow-inner\"\n          style={{ maxWidth: `${data.size}px` }}\n        >\n          <div\n            className=\"absolute inset-0 rounded-2xl bg-gradient-to-br from-muted/40 to-transparent\"\n            aria-hidden\n          />\n          <img\n            src={data.output}\n            alt={`QR code encoding ${\n              data.data.length > 50\n                ? `'${data.data.slice(0, 50)}...'`\n                : `'${data.data}'`\n            }`}\n            width={data.size}\n            height={data.size}\n            loading=\"lazy\"\n            decoding=\"async\"\n            className=\"relative z-10 h-auto w-full\"\n          />\n        </div>\n        <Button\n          onClick={handleDownload}\n          disabled={downloading}\n          className=\"w-full\"\n          aria-busy={downloading}\n          aria-live=\"polite\"\n          aria-label={\n            downloaded\n              ? \"QR code saved\"\n              : downloading\n                ? \"Downloading QR code\"\n                : \"Download QR code as PNG\"\n          }\n        >\n          {downloaded ? (\n            <>\n              <CheckIcon className=\"mr-1.5\" />\n              Saved\n            </>\n          ) : (\n            <>\n              <DownloadIcon className=\"mr-1.5\" />\n              {downloading ? \"Downloading...\" : \"Download PNG\"}\n            </>\n          )}\n        </Button>\n        {error ? (\n          <div\n            role=\"status\"\n            aria-live=\"assertive\"\n            className=\"w-full text-sm text-destructive\"\n          >\n            {error}\n          </div>\n        ) : null}\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default QRCodeDisplay\n",
      "type": "registry:file",
      "target": "~/ai/tools/qrcode/component.tsx"
    },
    {
      "path": "registry/ai-tools/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/ai-elements/loader.tsx",
      "content": "import { cn } from \"@/lib/utils\"\nimport type { HTMLAttributes } from \"react\"\n\ntype LoaderIconProps = {\n  size?: number\n}\n\nconst LoaderIcon = ({ size = 16 }: LoaderIconProps) => (\n  <svg\n    height={size}\n    strokeLinejoin=\"round\"\n    style={{ color: \"currentcolor\" }}\n    viewBox=\"0 0 16 16\"\n    width={size}\n  >\n    <title>Loader</title>\n    <g clipPath=\"url(#clip0_2393_1490)\">\n      <path d=\"M8 0V4\" stroke=\"currentColor\" strokeWidth=\"1.5\" />\n      <path\n        d=\"M8 16V12\"\n        opacity=\"0.5\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M3.29773 1.52783L5.64887 4.7639\"\n        opacity=\"0.9\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M12.7023 1.52783L10.3511 4.7639\"\n        opacity=\"0.1\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M12.7023 14.472L10.3511 11.236\"\n        opacity=\"0.4\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M3.29773 14.472L5.64887 11.236\"\n        opacity=\"0.6\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M15.6085 5.52783L11.8043 6.7639\"\n        opacity=\"0.2\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M0.391602 10.472L4.19583 9.23598\"\n        opacity=\"0.7\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M15.6085 10.4722L11.8043 9.2361\"\n        opacity=\"0.3\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M0.391602 5.52783L4.19583 6.7639\"\n        opacity=\"0.8\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n    </g>\n    <defs>\n      <clipPath id=\"clip0_2393_1490\">\n        <rect fill=\"white\" height=\"16\" width=\"16\" />\n      </clipPath>\n    </defs>\n  </svg>\n)\n\nexport type LoaderProps = HTMLAttributes<HTMLDivElement> & {\n  size?: number\n}\n\nexport const Loader = ({ className, size = 16, ...props }: LoaderProps) => (\n  <div\n    className={cn(\n      \"inline-flex animate-spin items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    <LoaderIcon size={size} />\n  </div>\n)\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "registry/ai-elements/code-block.tsx",
      "content": "\"use client\"\n\nimport { Button } from \"@/registry/ai-tools/ui/button\"\nimport { cn } from \"@/lib/utils\"\nimport { CheckIcon, CopyIcon } from \"lucide-react\"\nimport type { ComponentProps, HTMLAttributes, ReactNode } from \"react\"\nimport { createContext, useContext, useState } from \"react\"\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\"\nimport {\n  oneDark,\n  oneLight,\n} from \"react-syntax-highlighter/dist/esm/styles/prism\"\n\ntype CodeBlockContextType = {\n  code: string\n}\n\nconst CodeBlockContext = createContext<CodeBlockContextType>({\n  code: \"\",\n})\n\nexport type CodeBlockProps = HTMLAttributes<HTMLDivElement> & {\n  code: string\n  language: string\n  showLineNumbers?: boolean\n  children?: ReactNode\n}\n\nexport const CodeBlock = ({\n  code,\n  language,\n  showLineNumbers = false,\n  className,\n  children,\n  ...props\n}: CodeBlockProps) => (\n  <CodeBlockContext.Provider value={{ code }}>\n    <div\n      className={cn(\n        \"relative w-full overflow-hidden rounded-md border bg-background text-foreground\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"relative\">\n        <SyntaxHighlighter\n          className=\"overflow-hidden dark:hidden\"\n          codeTagProps={{\n            className: \"font-mono text-sm\",\n          }}\n          customStyle={{\n            margin: 0,\n            padding: \"1rem\",\n            fontSize: \"0.875rem\",\n            background: \"hsl(var(--background))\",\n            color: \"hsl(var(--foreground))\",\n          }}\n          language={language}\n          lineNumberStyle={{\n            color: \"hsl(var(--muted-foreground))\",\n            paddingRight: \"1rem\",\n            minWidth: \"2.5rem\",\n          }}\n          showLineNumbers={showLineNumbers}\n          style={oneLight}\n        >\n          {code}\n        </SyntaxHighlighter>\n        <SyntaxHighlighter\n          className=\"hidden overflow-hidden dark:block\"\n          codeTagProps={{\n            className: \"font-mono text-sm\",\n          }}\n          customStyle={{\n            margin: 0,\n            padding: \"1rem\",\n            fontSize: \"0.875rem\",\n            background: \"hsl(var(--background))\",\n            color: \"hsl(var(--foreground))\",\n          }}\n          language={language}\n          lineNumberStyle={{\n            color: \"hsl(var(--muted-foreground))\",\n            paddingRight: \"1rem\",\n            minWidth: \"2.5rem\",\n          }}\n          showLineNumbers={showLineNumbers}\n          style={oneDark}\n        >\n          {code}\n        </SyntaxHighlighter>\n        {children && (\n          <div className=\"absolute top-2 right-2 flex items-center gap-2\">\n            {children}\n          </div>\n        )}\n      </div>\n    </div>\n  </CodeBlockContext.Provider>\n)\n\nexport type CodeBlockCopyButtonProps = ComponentProps<typeof Button> & {\n  onCopy?: () => void\n  onError?: (error: Error) => void\n  timeout?: number\n}\n\nexport const CodeBlockCopyButton = ({\n  onCopy,\n  onError,\n  timeout = 2000,\n  children,\n  className,\n  ...props\n}: CodeBlockCopyButtonProps) => {\n  const [isCopied, setIsCopied] = useState(false)\n  const { code } = useContext(CodeBlockContext)\n\n  const copyToClipboard = async () => {\n    if (typeof window === \"undefined\" || !navigator.clipboard.writeText) {\n      onError?.(new Error(\"Clipboard API not available\"))\n      return\n    }\n\n    try {\n      await navigator.clipboard.writeText(code)\n      setIsCopied(true)\n      onCopy?.()\n      setTimeout(() => setIsCopied(false), timeout)\n    } catch (error) {\n      onError?.(error as Error)\n    }\n  }\n\n  const Icon = isCopied ? CheckIcon : CopyIcon\n\n  return (\n    <Button\n      className={cn(\"shrink-0\", className)}\n      onClick={copyToClipboard}\n      size=\"icon\"\n      variant=\"ghost\"\n      {...props}\n    >\n      {children ?? <Icon size={14} />}\n    </Button>\n  )\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "registry/ai-tools/ui/card.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/ai-tools/ui/skeleton.tsx",
      "content": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"skeleton\"\n      className={cn(\"bg-accent animate-pulse rounded-md\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
