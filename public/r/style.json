{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "style",
  "type": "registry:style",
  "files": [
    {
      "path": "registry/ai-tools/rules/registry.mdc",
      "content": "---\ndescription: Guidelines for using the AI Tools Registry\nglobs:\nalwaysApply: true\n---\n\n## AI Tools Registry — Usage Guidelines\n\n- Prefer installing official tools before writing new ones. Use the remote registry (e.g. https://ai-tools-registry.vercel.app/api/registry/public/{name}) with the shadcn CLI.\n- Keep tool logic and its renderer colocated: `~/ai/tools/{tool}/tool.ts` and (optionally) `~/ai/tools/{tool}/component.tsx`.\n- Mark renderers with `use client` and avoid importing them from server-only contexts.\n- Validate inputs/outputs with Zod; avoid `any`.\n- When contributing to a registry item, ensure each `registry:file` entry includes a `target` and that `files[*].path` exists.\n- Follow naming that matches folder names (e.g., `weather`, `news`).\n- Tools commonly depend on `ai` and `zod`.\n\n### Install examples\n\n```bash\nnpx shadcn@latest add @ai-tools/weather\nnpx shadcn@latest add @ai-tools/websearch\n```\n\n### Colocation pattern\n\n```\n~/ai/tools/weather/\n  ├─ tool.ts        # server/tool logic\n  └─ component.tsx  # optional client renderer\n```\n\n### Server/client boundaries\n\n- Keep side-effectful code (fetch, network) inside tool `execute` on server.\n- Pass plain data to the client renderer.\n",
      "type": "registry:file",
      "target": ".cursor/rules/registry.mdc"
    }
  ],
  "cssVars": {
    "light": {
      "primary": "oklch(0.63 0.17 149)",
      "primary-foreground": "oklch(0.985 0 0)",
      "radius": "0.825rem"
    },
    "dark": {
      "primary": "oklch(0.63 0.17 149)",
      "primary-foreground": "oklch(0.985 0 0)"
    }
  }
}
