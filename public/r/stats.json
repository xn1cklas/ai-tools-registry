{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "stats",
  "type": "registry:component",
  "title": "Public Stats",
  "author": "Nicklas Scharpff <https://n1cklas.com>",
  "description": "AI SDK tool that fetches global earthquake counts from USGS and renders a chart.",
  "dependencies": ["zod", "ai", "recharts"],
  "registryDependencies": [
    "https://ai-tools-registry.vercel.app/r/card.json",
    "https://ai-tools-registry.vercel.app/r/chart.json"
  ],
  "files": [
    {
      "path": "registry/ai-tools/tools/stats/tool.ts",
      "content": "import { UIToolInvocation, tool } from \"ai\"\nimport { z } from \"zod\"\n\n// Fetch global earthquake counts (per day) from USGS for the last N days\nexport const StatsSeriesPointSchema = z.object({\n  date: z.string(),\n  count: z.number(),\n})\n\nexport const PublicStatsSchema = z.object({\n  title: z.string(),\n  series: z.array(StatsSeriesPointSchema),\n})\n\nexport type StatsSeriesPoint = z.infer<typeof StatsSeriesPointSchema>\nexport type PublicStatsResult = z.infer<typeof PublicStatsSchema>\n\nexport const publicStatsTool = tool({\n  name: \"stats\",\n  description:\n    \"Fetch daily counts of global earthquakes from USGS for the last N days.\",\n  inputSchema: z.object({\n    daysBack: z\n      .number()\n      .int()\n      .min(1)\n      .max(365)\n      .default(30)\n      .describe(\"How many days back from today (UTC) to include\"),\n    minMagnitude: z\n      .number()\n      .min(0)\n      .max(10)\n      .default(5)\n      .describe(\"Minimum magnitude to include\"),\n  }),\n  outputSchema: PublicStatsSchema,\n  execute: async ({ daysBack, minMagnitude }): Promise<PublicStatsResult> => {\n    const end = new Date()\n    const start = new Date(end.getTime() - daysBack * 24 * 60 * 60 * 1000)\n\n    const fmt = (d: Date) => d.toISOString().slice(0, 10)\n\n    const params = new URLSearchParams({\n      format: \"geojson\",\n      starttime: fmt(start),\n      endtime: fmt(end),\n      minmagnitude: String(minMagnitude),\n    })\n    const url = `https://earthquake.usgs.gov/fdsnws/event/1/query?${params.toString()}`\n    const res = await fetch(url)\n    if (!res.ok) throw new Error(`USGS API failed: ${res.status}`)\n    const data = (await res.json()) as {\n      features?: Array<{ properties?: { time?: number } }>\n    }\n\n    const counts = new Map<string, number>()\n    for (const f of data.features ?? []) {\n      const t = f?.properties?.time\n      if (!Number.isFinite(t)) continue\n      const day = new Date(Number(t)).toISOString().slice(0, 10)\n      counts.set(day, (counts.get(day) || 0) + 1)\n    }\n\n    const series: StatsSeriesPoint[] = []\n    for (let i = daysBack; i >= 0; i--) {\n      const d = new Date(end.getTime() - i * 24 * 60 * 60 * 1000)\n      const day = d.toISOString().slice(0, 10)\n      series.push({ date: day, count: counts.get(day) || 0 })\n    }\n\n    return { title: `Global M${minMagnitude}+ earthquakes`, series }\n  },\n})\n\nexport default publicStatsTool\n\nexport type StatsToolType = UIToolInvocation<typeof publicStatsTool>\n",
      "type": "registry:file",
      "target": "~/ai/tools/stats/tool.ts"
    },
    {
      "path": "registry/ai-tools/tools/stats/component.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport type { StatsSeriesPoint, StatsToolType } from \"./tool\"\nimport { Loader } from \"@/registry/ai-elements/loader\"\nimport {\n  ChartContainer,\n  ChartLegend,\n  ChartLegendContent,\n  ChartTooltip,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/registry/ai-tools/ui/chart\"\nimport { AreaChart, Area, CartesianGrid, XAxis, YAxis } from \"recharts\"\nimport type { Props as DefaultLegendContentProps } from \"recharts/types/component/DefaultLegendContent\"\nimport { cn } from \"@/lib/utils\"\nimport { Card, CardContent, CardHeader } from \"@/registry/ai-tools/ui/card\"\nimport { Skeleton } from \"@/registry/ai-tools/ui/skeleton\"\n\nexport function StatsChart({ invocation }: { invocation: StatsToolType }) {\n  const part = invocation\n  const cardBaseClass =\n    \"not-prose flex w-full flex-col gap-0 overflow-hidden border border-border/50 bg-background/95 py-0 text-foreground shadow-sm\"\n  const headerBaseClass =\n    \"flex flex-col gap-2 border-b border-border/50 px-5 py-4 sm:flex-row sm:items-center sm:justify-between\"\n  const contentBaseClass = \"px-6 py-5\"\n  const renderHeader = (\n    title: React.ReactNode,\n    description?: React.ReactNode,\n    actions?: React.ReactNode\n  ) => {\n    const descriptionNode =\n      typeof description === \"string\" ? (\n        <p className=\"text-xs text-muted-foreground\">{description}</p>\n      ) : (\n        (description ?? null)\n      )\n\n    return (\n      <CardHeader className={headerBaseClass}>\n        {(title || descriptionNode) && (\n          <div className=\"space-y-1\">\n            {title ? (\n              <h3 className=\"text-sm font-semibold leading-none tracking-tight text-foreground\">\n                {title}\n              </h3>\n            ) : null}\n            {descriptionNode}\n          </div>\n        )}\n        {actions ? (\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            {actions}\n          </div>\n        ) : null}\n      </CardHeader>\n    )\n  }\n  if (part.state === \"input-streaming\") {\n    return (\n      <Card className={cn(cardBaseClass, \"max-w-xl animate-in fade-in-50\")}>\n        {renderHeader(\"Public Stats\", \"Waiting for parameters…\")}\n        <CardContent\n          className={cn(\n            contentBaseClass,\n            \"space-y-4 text-sm text-muted-foreground\"\n          )}\n        >\n          <div className=\"flex items-center gap-2\">\n            <Loader /> Preparing request\n          </div>\n          <div className=\"rounded-xl border border-dashed border-border/60 bg-muted/30 p-3\">\n            <Skeleton className=\"h-[260px] w-full rounded-lg\" />\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (part.state === \"input-available\") {\n    return (\n      <Card className={cn(cardBaseClass, \"max-w-xl animate-in fade-in-50\")}>\n        {renderHeader(\"Public Stats\", \"Loading…\")}\n        <CardContent\n          className={cn(\n            contentBaseClass,\n            \"space-y-4 text-sm text-muted-foreground\"\n          )}\n        >\n          <div className=\"flex items-center gap-2\">\n            <Loader /> Running tool\n          </div>\n          <div className=\"rounded-xl border border-dashed border-border/60 bg-muted/30 p-3\">\n            <Skeleton className=\"h-[260px] w-full rounded-lg\" />\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (part.state === \"output-error\") {\n    return (\n      <Card className={cn(cardBaseClass, \"max-w-xl animate-in fade-in-50\")}>\n        {renderHeader(\"Public Stats\", \"Error\")}\n        <CardContent className={contentBaseClass}>\n          <div className=\"rounded-md border border-destructive/30 bg-destructive/10 p-3 text-sm text-destructive\">\n            {part.errorText || \"An error occurred while loading stats.\"}\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (!part.output) {\n    return (\n      <Card className={cn(cardBaseClass, \"max-w-xl animate-in fade-in-50\")}>\n        {renderHeader(\"Public Stats\", \"No data\")}\n        <CardContent\n          className={cn(\n            contentBaseClass,\n            \"space-y-4 text-sm text-muted-foreground\"\n          )}\n        >\n          <div>No data to display.</div>\n          <div className=\"rounded-xl border border-dashed border-border/60 bg-muted/30 p-3\">\n            <Skeleton className=\"h-[260px] w-full rounded-lg\" />\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  const config: ChartConfig = {\n    count: { label: \"Quakes\", color: \"var(--border)\" },\n  }\n\n  const chartData =\n    part.output?.series.map((d: StatsSeriesPoint) => ({\n      date: d.date,\n      count: d.count,\n    })) ?? []\n\n  return (\n    <Card className={cn(cardBaseClass, \"max-w-xl animate-in fade-in-50\")}>\n      {renderHeader(\n        part.output?.title ?? \"Public Stats\",\n        \"Source: USGS Earthquake Catalog\"\n      )}\n      <CardContent className={cn(contentBaseClass, \"pb-6\")}>\n        <ChartContainer config={config} className=\"h-[260px] sm:h-[320px]\">\n          <AreaChart\n            data={chartData}\n            margin={{ left: 8, right: 8, top: 16, bottom: 8 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"date\" tick={{ fontSize: 12 }} tickMargin={8} />\n            <YAxis\n              tickFormatter={(v) =>\n                Intl.NumberFormat(undefined, { notation: \"compact\" }).format(\n                  Number(v)\n                )\n              }\n              tick={{ fontSize: 12 }}\n              tickMargin={8}\n            />\n            <ChartTooltip content={<ChartTooltipContent />} />\n            <ChartLegend\n              verticalAlign=\"top\"\n              content={(props: DefaultLegendContentProps) => (\n                <ChartLegendContent\n                  verticalAlign=\"top\"\n                  payload={props.payload}\n                />\n              )}\n            />\n            <Area\n              type=\"monotone\"\n              dataKey=\"count\"\n              stroke=\"var(--color-count)\"\n              fill=\"var(--color-count)\"\n              fillOpacity={0.2}\n              name=\"Quakes\"\n              dot={{\n                r: 2,\n                stroke: \"var(--color-count)\",\n                fill: \"var(--color-count)\",\n              }}\n              activeDot={{ r: 3 }}\n            />\n          </AreaChart>\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default StatsChart\n",
      "type": "registry:file",
      "target": "~/ai/tools/stats/component.tsx"
    },
    {
      "path": "registry/ai-elements/loader.tsx",
      "content": "import { cn } from \"@/lib/utils\"\nimport type { HTMLAttributes } from \"react\"\n\ntype LoaderIconProps = {\n  size?: number\n}\n\nconst LoaderIcon = ({ size = 16 }: LoaderIconProps) => (\n  <svg\n    height={size}\n    strokeLinejoin=\"round\"\n    style={{ color: \"currentcolor\" }}\n    viewBox=\"0 0 16 16\"\n    width={size}\n  >\n    <title>Loader</title>\n    <g clipPath=\"url(#clip0_2393_1490)\">\n      <path d=\"M8 0V4\" stroke=\"currentColor\" strokeWidth=\"1.5\" />\n      <path\n        d=\"M8 16V12\"\n        opacity=\"0.5\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M3.29773 1.52783L5.64887 4.7639\"\n        opacity=\"0.9\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M12.7023 1.52783L10.3511 4.7639\"\n        opacity=\"0.1\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M12.7023 14.472L10.3511 11.236\"\n        opacity=\"0.4\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M3.29773 14.472L5.64887 11.236\"\n        opacity=\"0.6\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M15.6085 5.52783L11.8043 6.7639\"\n        opacity=\"0.2\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M0.391602 10.472L4.19583 9.23598\"\n        opacity=\"0.7\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M15.6085 10.4722L11.8043 9.2361\"\n        opacity=\"0.3\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M0.391602 5.52783L4.19583 6.7639\"\n        opacity=\"0.8\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n    </g>\n    <defs>\n      <clipPath id=\"clip0_2393_1490\">\n        <rect fill=\"white\" height=\"16\" width=\"16\" />\n      </clipPath>\n    </defs>\n  </svg>\n)\n\nexport type LoaderProps = HTMLAttributes<HTMLDivElement> & {\n  size?: number\n}\n\nexport const Loader = ({ className, size = 16, ...props }: LoaderProps) => (\n  <div\n    className={cn(\n      \"inline-flex animate-spin items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    <LoaderIcon size={size} />\n  </div>\n)\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "registry/ai-tools/ui/chart.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nfunction ChartContainer({\n  id,\n  className,\n  children,\n  config,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  config: ChartConfig\n  children: React.ComponentProps<\n    typeof RechartsPrimitive.ResponsiveContainer\n  >[\"children\"]\n}) {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-slot=\"chart\"\n        data-chart={chartId}\n        className={cn(\n          \"[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n}\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nfunction ChartTooltipContent({\n  active,\n  payload,\n  className,\n  indicator = \"dot\",\n  hideLabel = false,\n  hideIndicator = false,\n  label,\n  labelFormatter,\n  labelClassName,\n  formatter,\n  color,\n  nameKey,\n  labelKey,\n}: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n  React.ComponentProps<\"div\"> & {\n    hideLabel?: boolean\n    hideIndicator?: boolean\n    indicator?: \"line\" | \"dot\" | \"dashed\"\n    nameKey?: string\n    labelKey?: string\n  }) {\n  const { config } = useChart()\n\n  const tooltipLabel = React.useMemo(() => {\n    if (hideLabel || !payload?.length) {\n      return null\n    }\n\n    const [item] = payload\n    const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n    const itemConfig = getPayloadConfigFromPayload(config, item, key)\n    const value =\n      !labelKey && typeof label === \"string\"\n        ? config[label as keyof typeof config]?.label || label\n        : itemConfig?.label\n\n    if (labelFormatter) {\n      return (\n        <div className={cn(\"font-medium\", labelClassName)}>\n          {labelFormatter(value, payload)}\n        </div>\n      )\n    }\n\n    if (!value) {\n      return null\n    }\n\n    return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n  }, [\n    label,\n    labelFormatter,\n    payload,\n    hideLabel,\n    labelClassName,\n    config,\n    labelKey,\n  ])\n\n  if (!active || !payload?.length) {\n    return null\n  }\n\n  const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n  return (\n    <div\n      className={cn(\n        \"border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl\",\n        className\n      )}\n    >\n      {!nestLabel ? tooltipLabel : null}\n      <div className=\"grid gap-1.5\">\n        {payload\n          .filter((item) => item.type !== \"none\")\n          .map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"text-foreground font-mono font-medium tabular-nums\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n      </div>\n    </div>\n  )\n}\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nfunction ChartLegendContent({\n  className,\n  hideIcon = false,\n  payload,\n  verticalAlign = \"bottom\",\n  nameKey,\n}: React.ComponentProps<\"div\"> &\n  Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n    hideIcon?: boolean\n    nameKey?: string\n  }) {\n  const { config } = useChart()\n\n  if (!payload?.length) {\n    return null\n  }\n\n  return (\n    <div\n      className={cn(\n        \"flex items-center justify-center gap-4\",\n        verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n        className\n      )}\n    >\n      {payload\n        .filter((item) => item.type !== \"none\")\n        .map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n    </div>\n  )\n}\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/ai-tools/ui/card.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/ai-tools/ui/skeleton.tsx",
      "content": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"skeleton\"\n      className={cn(\"bg-accent animate-pulse rounded-md\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
