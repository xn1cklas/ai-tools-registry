{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "image-fal",
  "type": "registry:component",
  "title": "Image Generation (FAL.ai)",
  "author": "Nicklas Scharpff <https://n1cklas.com>",
  "description": "Generate images using FAL.ai via Vercel AI SDK. Shares renderer.",
  "dependencies": [
    "zod",
    "ai",
    "@ai-sdk/fal",
    "@radix-ui/react-slot",
    "class-variance-authority"
  ],
  "registryDependencies": ["https://ai-tools-registry.vercel.app/r/card.json"],
  "files": [
    {
      "path": "registry/ai-tools/tools/image/image-fal-tool.ts",
      "content": "import { fal } from \"@ai-sdk/fal\"\nimport {\n  tool,\n  experimental_generateImage as generateImage,\n  type UIToolInvocation,\n} from \"ai\"\n\nimport {\n  ImageResultSchema,\n  ImageResult,\n  ImageItem,\n  ImageInputSchema,\n} from \"./schema\"\n\nexport const imageFalTool = tool({\n  name: \"image-fal\",\n  description: \"Generate images using FAL.ai via Vercel AI SDK (flux/schnell).\",\n  inputSchema: ImageInputSchema,\n  outputSchema: ImageResultSchema,\n  execute: async ({\n    prompt,\n    referenceImageUrl,\n    n,\n    aspectRatio,\n    seed,\n    negativePrompt,\n  }) => {\n    type GeneratedImage = {\n      url?: string\n      base64?: string\n      mimeType?: string\n      contentType?: string\n      width?: number\n      height?: number\n    }\n    const ar =\n      aspectRatio && /^\\d+:\\d+$/.test(aspectRatio)\n        ? (aspectRatio as `${number}:${number}`)\n        : undefined\n    const { images }: { images: GeneratedImage[] } = await generateImage({\n      model: fal.image(\"fal-ai/flux/schnell\"),\n      prompt,\n      aspectRatio: ar,\n      seed,\n      n,\n      providerOptions: {\n        negativePrompt:\n          typeof negativePrompt === \"string\"\n            ? { value: negativePrompt }\n            : negativePrompt || {},\n      },\n    })\n\n    const out: ImageItem[] = (images || []).map((img) => ({\n      url: img.url,\n      base64: img.base64,\n      mimeType: img.mimeType || img.contentType,\n      width: img.width,\n      height: img.height,\n    }))\n\n    const result: ImageResult = {\n      provider: \"fal\",\n      prompt,\n      images: out,\n      aspectRatio,\n      seed,\n    }\n    return result\n  },\n})\n\nexport type ImageFalToolType = UIToolInvocation<typeof imageFalTool>\n",
      "type": "registry:file",
      "target": "~/ai/tools/image/tool.ts"
    },
    {
      "path": "registry/ai-tools/tools/image/component.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { ImageToolType } from \"./tool\"\nimport { type ImageInput, type ImageItem } from \"./schema\"\nimport { Loader } from \"@/registry/ai-elements/loader\"\nimport { Badge } from \"@/registry/ai-tools/ui/badge\"\nimport { cn } from \"@/lib/utils\"\n\nimport { Skeleton } from \"@/registry/ai-tools/ui/skeleton\"\nimport { Card, CardContent, CardHeader } from \"@/registry/ai-tools/ui/card\"\n\nexport function ImageGrid({ invocation }: { invocation: ImageToolType }) {\n  const part = invocation\n  const desiredCount = Math.max(1, Math.min(4, part.input?.n ?? 3))\n  const desiredAR = part.input?.aspectRatio ?? \"1:1\"\n\n  const cardBaseClass =\n    \"not-prose flex w-full flex-col gap-0 overflow-hidden border border-border/50 bg-background/95 py-0 text-foreground shadow-sm\"\n  const headerBaseClass =\n    \"flex flex-col gap-2 border-b border-border/50 px-5 py-4 sm:flex-row sm:items-center sm:justify-between\"\n  const contentBaseClass = \"px-6 py-5\"\n\n  const toAspectRatio = (s: string) => {\n    const parts = s.split(\":\")\n    if (parts.length === 2) return `${parts[0]} / ${parts[1]}`\n    return \"1 / 1\"\n  }\n\n  const gridColsForCount = (count: number) => {\n    if (count <= 1) return \"grid-cols-1\"\n    if (count === 2) return \"grid-cols-1 sm:grid-cols-2\"\n    if (count === 3) return \"grid-cols-1 sm:grid-cols-2 lg:grid-cols-3\"\n    return \"grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 xl:grid-cols-4\"\n  }\n\n  const renderPlaceholderTiles = (count: number, aspect: string) => {\n    const ratio = toAspectRatio(aspect)\n\n    return Array.from({ length: count }).map((_, i) => (\n      <div\n        key={`placeholder-${i}`}\n        className=\"relative w-full overflow-hidden rounded-xl border border-border/50 bg-background\"\n        style={{ aspectRatio: ratio }}\n      >\n        <Skeleton className=\"absolute inset-0 h-full w-full\" />\n        <div className=\"absolute inset-0 bg-gradient-to-br from-foreground/5 via-transparent to-transparent\" />\n      </div>\n    ))\n  }\n\n  const renderHeader = (\n    title: React.ReactNode,\n    description?: React.ReactNode,\n    actions?: React.ReactNode\n  ) => {\n    const descriptionNode =\n      typeof description === \"string\" ? (\n        <p className=\"text-xs text-muted-foreground\">{description}</p>\n      ) : (\n        (description ?? null)\n      )\n\n    return (\n      <CardHeader className={headerBaseClass}>\n        {(title || descriptionNode) && (\n          <div className=\"space-y-1\">\n            {title ? (\n              <h3 className=\"text-sm font-semibold leading-none tracking-tight text-foreground\">\n                {title}\n              </h3>\n            ) : null}\n            {descriptionNode}\n          </div>\n        )}\n        {actions ? (\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            {actions}\n          </div>\n        ) : null}\n      </CardHeader>\n    )\n  }\n\n  if (part.state === \"input-streaming\") {\n    return (\n      <Card className={cn(cardBaseClass, \"max-w-xl animate-in fade-in-50\")}>\n        {renderHeader(\"Generated Images\", \"Waiting for prompt…\")}\n        <CardContent className={cn(contentBaseClass, \"space-y-4\")}>\n          <div className={`grid gap-4 ${gridColsForCount(desiredCount)}`}>\n            {renderPlaceholderTiles(desiredCount, desiredAR)}\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <Loader /> Preparing generation\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (part.state === \"input-available\") {\n    return (\n      <Card className={cn(cardBaseClass, \"max-w-xl animate-in fade-in-50\")}>\n        {renderHeader(\"Generated Images\", \"Generating…\")}\n        <CardContent className={cn(contentBaseClass, \"space-y-4\")}>\n          <div className={`grid gap-4 ${gridColsForCount(desiredCount)}`}>\n            {renderPlaceholderTiles(desiredCount, desiredAR)}\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <Loader /> Running tool\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (part.state === \"output-error\") {\n    return (\n      <Card className={cn(cardBaseClass, \"max-w-xl animate-in fade-in-50\")}>\n        {renderHeader(\"Generated Images\", \"Error\")}\n        <CardContent\n          className={cn(\n            contentBaseClass,\n            \"space-y-4 text-sm text-muted-foreground\"\n          )}\n        >\n          <div className={`grid gap-4 ${gridColsForCount(desiredCount)}`}>\n            {renderPlaceholderTiles(desiredCount, desiredAR)}\n          </div>\n          <div className=\"rounded-md border border-destructive/30 bg-destructive/10 p-3 text-destructive\">\n            {part.errorText || \"An error occurred while generating images.\"}\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n  if (!part.output) return null\n  const { images, provider, prompt, aspectRatio } = part.output\n  const ar = part.input?.aspectRatio ?? aspectRatio ?? \"1:1\"\n\n  // Render exactly the number of generated images, capped by desiredCount\n  const displayCount = Math.min(images.length, desiredCount)\n  const selectedImages = images.slice(0, displayCount)\n  const gridCols = gridColsForCount(displayCount)\n\n  return (\n    <Card className={cn(cardBaseClass, \"max-w-xl animate-in fade-in-50\")}>\n      {renderHeader(\n        \"Generated Images\",\n        prompt ? `“${prompt}”` : undefined,\n        <Badge variant=\"secondary\" className=\"rounded-full\">\n          {provider}\n        </Badge>\n      )}\n      <CardContent className={cn(contentBaseClass, \"pb-6\")}>\n        <div className={`grid ${gridCols} gap-4`}>\n          {selectedImages.map((img, i) => {\n            const src = img?.url\n              ? img.url\n              : img?.base64\n                ? `data:${img.mimeType || \"image/png\"};base64,${img.base64}`\n                : \"\"\n            return (\n              <div\n                key={src || `ph-${i}`}\n                className=\"w-full overflow-hidden rounded-xl border border-border/50 bg-background\"\n                style={{ aspectRatio: toAspectRatio(ar) }}\n              >\n                <img\n                  src={src}\n                  alt={prompt ?? \"Generated image\"}\n                  className=\"h-full w-full object-cover\"\n                  loading=\"lazy\"\n                />\n              </div>\n            )\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default ImageGrid\n",
      "type": "registry:file",
      "target": "~/ai/tools/image/component.tsx"
    },
    {
      "path": "registry/ai-tools/tools/image/schema.ts",
      "content": "import { z } from \"zod\"\n\nexport const ImageInputSchema = z\n  .object({\n    prompt: z.string().min(1).describe(\"The text prompt to guide generation.\"),\n    referenceImageUrl: z\n      .string()\n      .url()\n      .optional()\n      .describe(\"Optional URL of an input/reference image for image-to-image.\"),\n    n: z\n      .number()\n      .int()\n      .min(1)\n      .max(8)\n      .default(1)\n      .describe(\"Number of images to generate (1–8).\"),\n    aspectRatio: z\n      .string()\n      .regex(/^\\d+:\\d+$/, 'Expected format \"<number>:<number>\", e.g., 1:1')\n      .optional()\n      .describe('Aspect ratio such as \"1:1\", \"16:9\", \"4:3\".'),\n    negativePrompt: z\n      .string()\n      .optional()\n      .describe(\"Optional negative prompt to avoid undesired features.\"),\n    seed: z\n      .number()\n      .optional()\n      .describe(\"Optional random seed for repeatability.\"),\n  })\n  .describe(\"Inputs for image generation across providers.\")\n\nexport const ImageItemSchema = z\n  .object({\n    url: z\n      .string()\n      .url()\n      .optional()\n      .describe(\"Public URL to the generated image, if available.\"),\n    base64: z\n      .string()\n      .optional()\n      .describe(\"Base64-encoded image data if no URL is provided.\"),\n    mimeType: z\n      .string()\n      .optional()\n      .describe(\"MIME type of the image, e.g., image/png.\"),\n    width: z.number().optional().describe(\"Image width in pixels.\"),\n    height: z.number().optional().describe(\"Image height in pixels.\"),\n  })\n  .describe(\"A single generated image in URL or base64 form.\")\n\nexport const ImageResultSchema = z\n  .object({\n    provider: z\n      .string()\n      .describe(\"Provider used for generation: openai, fal, runware, etc.\"),\n    prompt: z.string().describe(\"The original text prompt used.\"),\n    images: z\n      .array(ImageItemSchema)\n      .describe(\"List of generated images in normalized format.\"),\n    aspectRatio: z\n      .string()\n      .optional()\n      .describe(\"Aspect ratio that was applied, when applicable.\"),\n    seed: z\n      .number()\n      .optional()\n      .describe(\"Seed used, if the provider supports it.\"),\n  })\n  .describe(\"Normalized output returned by image generation tools.\")\n\nexport type ImageItem = z.infer<typeof ImageItemSchema>\nexport type ImageResult = z.infer<typeof ImageResultSchema>\nexport type ImageInput = z.infer<typeof ImageInputSchema>\n",
      "type": "registry:file",
      "target": "~/ai/tools/image/schema.ts"
    },
    {
      "path": "registry/ai-tools/tools/image/tool.ts",
      "content": "import { UIToolInvocation, tool } from \"ai\"\n\nimport {\n  ImageResultSchema,\n  ImageItem,\n  ImageResult,\n  ImageInputSchema,\n} from \"./schema\"\n\nexport const imageTool = tool({\n  name: \"image\",\n  description:\n    \"Generate images from a text prompt. This is a generic entry — see provider-specific tools for actual generation.\",\n  inputSchema: ImageInputSchema,\n  outputSchema: ImageResultSchema,\n  execute: async ({ prompt, n, aspectRatio, seed }) => {\n    const images: ImageItem[] = []\n    const result: ImageResult = {\n      provider: \"none\",\n      prompt,\n      images,\n      aspectRatio,\n      seed,\n    }\n    return result\n  },\n})\n\nexport default imageTool\nexport type ImageToolType = UIToolInvocation<typeof imageTool>\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "registry/ai-elements/loader.tsx",
      "content": "import { cn } from \"@/lib/utils\"\nimport type { HTMLAttributes } from \"react\"\n\ntype LoaderIconProps = {\n  size?: number\n}\n\nconst LoaderIcon = ({ size = 16 }: LoaderIconProps) => (\n  <svg\n    height={size}\n    strokeLinejoin=\"round\"\n    style={{ color: \"currentcolor\" }}\n    viewBox=\"0 0 16 16\"\n    width={size}\n  >\n    <title>Loader</title>\n    <g clipPath=\"url(#clip0_2393_1490)\">\n      <path d=\"M8 0V4\" stroke=\"currentColor\" strokeWidth=\"1.5\" />\n      <path\n        d=\"M8 16V12\"\n        opacity=\"0.5\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M3.29773 1.52783L5.64887 4.7639\"\n        opacity=\"0.9\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M12.7023 1.52783L10.3511 4.7639\"\n        opacity=\"0.1\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M12.7023 14.472L10.3511 11.236\"\n        opacity=\"0.4\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M3.29773 14.472L5.64887 11.236\"\n        opacity=\"0.6\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M15.6085 5.52783L11.8043 6.7639\"\n        opacity=\"0.2\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M0.391602 10.472L4.19583 9.23598\"\n        opacity=\"0.7\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M15.6085 10.4722L11.8043 9.2361\"\n        opacity=\"0.3\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M0.391602 5.52783L4.19583 6.7639\"\n        opacity=\"0.8\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n    </g>\n    <defs>\n      <clipPath id=\"clip0_2393_1490\">\n        <rect fill=\"white\" height=\"16\" width=\"16\" />\n      </clipPath>\n    </defs>\n  </svg>\n)\n\nexport type LoaderProps = HTMLAttributes<HTMLDivElement> & {\n  size?: number\n}\n\nexport const Loader = ({ className, size = 16, ...props }: LoaderProps) => (\n  <div\n    className={cn(\n      \"inline-flex animate-spin items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    <LoaderIcon size={size} />\n  </div>\n)\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "registry/ai-tools/ui/badge.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90\",\n        destructive:\n          \"border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\"\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nexport { Badge, badgeVariants }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/ai-tools/ui/skeleton.tsx",
      "content": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"skeleton\"\n      className={cn(\"bg-accent animate-pulse rounded-md\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/ai-tools/ui/card.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
