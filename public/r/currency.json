{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "currency",
  "type": "registry:component",
  "title": "Currency Converter",
  "author": "Tobias Büschel <https://github.com/tobiasbueschel>",
  "description": "Convert currencies with real-time rates, including crypto currencies.",
  "dependencies": ["ai", "zod"],
  "registryDependencies": ["https://ai-tools-registry.vercel.app/r/card.json"],
  "files": [
    {
      "path": "registry/ai-tools/tools/currency/tool.ts",
      "content": "import { tool, UIToolInvocation } from \"ai\"\nimport {\n  CurrencyConverterInputSchema,\n  CurrencyConverterOutputSchema,\n} from \"./schema\"\n\nexport const currencyConverterTool = tool({\n  name: \"currency\",\n  description:\n    \"Convert currencies with real-time rates, including crypto currencies.\",\n  inputSchema: CurrencyConverterInputSchema,\n  outputSchema: CurrencyConverterOutputSchema,\n  execute: async ({ amount, from, to, date }) => {\n    // Use exchangerate-api.com (free tier, no API key required)\n    const baseUrl = \"https://api.exchangerate-api.com/v4/latest\"\n    const url = date ? `https://api.exchangerate-api.com/v4/${date}` : baseUrl\n\n    const res = await fetch(url)\n    if (!res.ok) {\n      throw new Error(`Currency API failed: ${res.status}`)\n    }\n\n    const data = (await res.json()) as ExchangeRateResponse\n\n    // Get the conversion rate\n    const fromRate = data.rates[from.toUpperCase()]\n    const toRate = data.rates[to.toUpperCase()]\n\n    if (!fromRate || !toRate) {\n      throw new Error(`Currency not supported: ${from} or ${to}`)\n    }\n\n    // Calculate conversion (convert to base currency first, then to target)\n    const baseAmount = amount / fromRate\n    const convertedAmount = baseAmount * toRate\n\n    return {\n      amount,\n      from: from.toUpperCase(),\n      to: to.toUpperCase(),\n      rate: toRate / fromRate,\n      converted: convertedAmount,\n      date: data.date,\n      lastUpdated: data.date,\n    }\n  },\n})\n\ninterface ExchangeRateResponse {\n  base: string\n  date: string\n  rates: Record<string, number>\n}\n\nexport default currencyConverterTool\n\nexport type CurrencyConverterToolType = UIToolInvocation<\n  typeof currencyConverterTool\n>\n",
      "type": "registry:file",
      "target": "~/ai/tools/currency/tool.ts"
    },
    {
      "path": "registry/ai-tools/tools/currency/component.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/ai-tools/ui/card\"\nimport { CurrencyConverterToolType } from \"./tool\"\nimport { Loader } from \"@/registry/ai-elements/loader\"\nimport { Skeleton } from \"@/registry/ai-tools/ui/skeleton\"\n\nconst CURRENCY_OPTIONS = {\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 6,\n}\ninterface Props {\n  invocation: CurrencyConverterToolType\n}\n\nexport function CurrencyDisplay({ invocation }: Props) {\n  const part = invocation\n\n  const formatCurrency = (amount: number, currency: string) => {\n    try {\n      return new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: currency,\n        ...CURRENCY_OPTIONS,\n      }).format(amount)\n    } catch (error) {\n      // Fallback to number format if currency code is invalid\n      return new Intl.NumberFormat(\"en-US\", CURRENCY_OPTIONS).format(amount)\n    }\n  }\n\n  const formatRate = (rate: number) => {\n    return new Intl.NumberFormat(\"en-US\", CURRENCY_OPTIONS).format(rate)\n  }\n\n  if (part.state === \"input-streaming\") {\n    return (\n      <Card className=\"w-full max-w-md animate-in fade-in-50\">\n        <CardHeader>\n          <CardTitle>Currency Converter</CardTitle>\n          <CardDescription>Waiting for data…</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4 text-sm text-muted-foreground\">\n          <div className=\"flex items-center gap-2\">\n            <Loader /> Preparing request\n          </div>\n          <div className=\"space-y-3\">\n            <Skeleton className=\"h-8 w-3/4 rounded-lg\" />\n            <Skeleton className=\"h-10 w-full rounded-lg\" />\n            <div className=\"grid grid-cols-2 gap-4\">\n              <Skeleton className=\"h-14 w-full rounded-md\" />\n              <Skeleton className=\"h-14 w-full rounded-md\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (part.state === \"input-available\") {\n    return (\n      <Card className=\"w-full max-w-md animate-in fade-in-50\">\n        <CardHeader>\n          <CardTitle>Currency Converter</CardTitle>\n          <CardDescription>Converting…</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <Loader /> Running tool\n          </div>\n          <div className=\"space-y-3\">\n            <Skeleton className=\"h-8 w-3/4 rounded-lg\" />\n            <Skeleton className=\"h-10 w-full rounded-lg\" />\n            <div className=\"grid grid-cols-2 gap-4\">\n              <Skeleton className=\"h-14 w-full rounded-md\" />\n              <Skeleton className=\"h-14 w-full rounded-md\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (part.state === \"output-error\") {\n    return (\n      <Card className=\"w-full max-w-md animate-in fade-in-50\">\n        <CardHeader>\n          <CardTitle>Currency Converter</CardTitle>\n          <CardDescription>Error</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"rounded-md border border-destructive/30 bg-destructive/10 p-3 text-sm text-destructive\">\n            {part.errorText || \"An error occurred while converting currency.\"}\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (part.output === undefined) return null\n\n  const data = part.output\n\n  return (\n    <Card className=\"w-full max-w-md animate-in fade-in-50\">\n      <CardHeader>\n        <CardTitle>Currency Converter</CardTitle>\n        <CardDescription>\n          {data.from} to {data.to}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"text-center\">\n          <div className=\"text-2xl font-bold\">\n            {formatCurrency(data.amount, data.from)}\n          </div>\n          <div className=\"text-muted-foreground text-sm\">equals</div>\n          <div className=\"text-3xl font-bold text-primary\">\n            {formatCurrency(data.converted, data.to)}\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n          <div className=\"rounded-md bg-muted p-3\">\n            <div className=\"text-muted-foreground\">Exchange Rate</div>\n            <div className=\"font-medium\">\n              1 {data.from} = {formatRate(data.rate)} {data.to}\n            </div>\n          </div>\n          <div className=\"rounded-md bg-muted p-3\">\n            <div className=\"text-muted-foreground\">Date</div>\n            <div className=\"font-medium\">\n              {new Date(data.date).toLocaleDateString()}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"text-center text-xs text-muted-foreground\">\n          Rates updated: {new Date(data.lastUpdated).toLocaleString()}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default CurrencyDisplay\n",
      "type": "registry:file",
      "target": "~/ai/tools/currency/component.tsx"
    },
    {
      "path": "registry/ai-tools/tools/currency/schema.ts",
      "content": "import { z } from \"zod\"\n\nexport const CurrencyConverterInputSchema = z.object({\n  amount: z.number().positive().describe(\"Amount to convert\"),\n  from: z.string().describe(\"Source currency code (e.g., USD, EUR, BTC)\"),\n  to: z.string().describe(\"Target currency code (e.g., EUR, JPY, ETH)\"),\n  date: z\n    .string()\n    .optional()\n    .describe(\"Optional date for historical rates (YYYY-MM-DD format)\"),\n})\nexport type CurrencyConverterInputSchemaType = z.infer<\n  typeof CurrencyConverterInputSchema\n>\n\nexport const CurrencyConverterOutputSchema =\n  CurrencyConverterInputSchema.extend({\n    // Make date required\n    date: z.string().describe(\"Date for historical rates (YYYY-MM-DD format)\"),\n    rate: z.number().describe(\"Conversion rate\"),\n    converted: z.number().describe(\"Converted amount\"),\n    lastUpdated: z.string().describe(\"Last updated date\"),\n  })\nexport type CurrencyConverterOutputSchemaType = z.infer<\n  typeof CurrencyConverterOutputSchema\n>\n",
      "type": "registry:file",
      "target": "~/ai/tools/currency/schema.ts"
    },
    {
      "path": "registry/ai-tools/ui/card.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/ai-elements/loader.tsx",
      "content": "import { cn } from \"@/lib/utils\"\nimport type { HTMLAttributes } from \"react\"\n\ntype LoaderIconProps = {\n  size?: number\n}\n\nconst LoaderIcon = ({ size = 16 }: LoaderIconProps) => (\n  <svg\n    height={size}\n    strokeLinejoin=\"round\"\n    style={{ color: \"currentcolor\" }}\n    viewBox=\"0 0 16 16\"\n    width={size}\n  >\n    <title>Loader</title>\n    <g clipPath=\"url(#clip0_2393_1490)\">\n      <path d=\"M8 0V4\" stroke=\"currentColor\" strokeWidth=\"1.5\" />\n      <path\n        d=\"M8 16V12\"\n        opacity=\"0.5\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M3.29773 1.52783L5.64887 4.7639\"\n        opacity=\"0.9\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M12.7023 1.52783L10.3511 4.7639\"\n        opacity=\"0.1\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M12.7023 14.472L10.3511 11.236\"\n        opacity=\"0.4\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M3.29773 14.472L5.64887 11.236\"\n        opacity=\"0.6\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M15.6085 5.52783L11.8043 6.7639\"\n        opacity=\"0.2\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M0.391602 10.472L4.19583 9.23598\"\n        opacity=\"0.7\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M15.6085 10.4722L11.8043 9.2361\"\n        opacity=\"0.3\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M0.391602 5.52783L4.19583 6.7639\"\n        opacity=\"0.8\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n    </g>\n    <defs>\n      <clipPath id=\"clip0_2393_1490\">\n        <rect fill=\"white\" height=\"16\" width=\"16\" />\n      </clipPath>\n    </defs>\n  </svg>\n)\n\nexport type LoaderProps = HTMLAttributes<HTMLDivElement> & {\n  size?: number\n}\n\nexport const Loader = ({ className, size = 16, ...props }: LoaderProps) => (\n  <div\n    className={cn(\n      \"inline-flex animate-spin items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    <LoaderIcon size={size} />\n  </div>\n)\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "registry/ai-tools/ui/skeleton.tsx",
      "content": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"skeleton\"\n      className={cn(\"bg-accent animate-pulse rounded-md\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
